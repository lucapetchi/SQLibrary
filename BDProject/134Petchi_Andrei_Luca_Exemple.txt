--Sa se selecteze numele clientilor care au o lungime > 10 , si care au facut comenzi servite de chelnerii cu id=501 sau id>503.Se arata,ulterior, doar cea mai mare lungime
select max(lungime_nume)as lungime_max_nume
from (
        select NUME_CLIENT, length(NUME_CLIENT) as lungime_nume
        from CLIENT
        where id_client in (
                                    select id_client
                                    from comanda 
                                    where id_staffr in ( 
                                                        select id_staffr
                                                        from STAFF_RESTAURANT 
                                                        where id_staffr>503 
                                                        or id_staffr=501
                                                      )
                                )
        group by NUME_CLIENT
        having length(NUME_CLIENT)>10
);

--Sa se afiseze numele , id-ul si numele restaurantul in care lucreaza , si salariul vechi si majorat stiind ca se majoreaza astfel: 20% pentru restaurantul Japanos fusion,15% pentru
--restaurantul Japanos by the lake, 10% pentru Japanos Tineretului, 10 % pentru Japanos Takeaway si 20% pentru Japanos Dorobanti.Salariul este majorat angajatiilor care s-au angajat
--dupa 2021, se afiseaza in ordinea restaurantelor in functie de id.


select a.nume_angajat,a.id_restaurant,r.nume_restaurant,a.salariu_angajat,decode(a.id_restaurant,
'1',NVL(salariu_angajat+0.2*salariu_angajat,0),
'2',NVL(salariu_angajat+0.15*salariu_angajat,0),
'3',NVL(salariu_angajat+0.1*salariu_angajat,0),
'4',NVL(salariu_angajat+0.1*salariu_angajat,0),
'5',NVL(salariu_angajat+0.2*salariu_angajat,0))"Salariu dupa majorare"
from ANGAJATI a,RESTAURANT r
where a.id_restaurant=r.id_restaurant and a.data_angajat>to_date('01/01/2021','dd/mm/yyyy')
order by a.id_restaurant;



------ Sa se obtina numele angajatului,telefonul si prefixul acestuia,data angajatului si categoria de salariu( Salariu mic < 5000 < Salariu Mediu <6000< Salariu mare )

SELECT NUME_ANGAJAT, TELEFON_ANGAJAT,
    SUBSTR(TELEFON_ANGAJAT, 1, 3) AS PREFIX_TELEFON,
    TO_CHAR(DATA_ANGAJAT, 'YYYY-MM-DD') AS DATA_ANGAJARE_FORMATATA,
    CASE
        WHEN SALARIU_ANGAJAT < 5000 THEN 'Salariu mic'
        WHEN SALARIU_ANGAJAT BETWEEN 5000 AND 6000 THEN 'Salariu mediu'
        ELSE 'Salariu mare'
    END AS CATEGORIE_SALARIU
FROM ANGAJATI;

--Sa se afiseze id-ul comenzii, id-ul clientului care a efectuat comanda si suma totala de platit pentru comenzile livrate de curieri angajati inainte de aprilie 2022.


WITH curierat as(
SELECT *
FROM COMANDA co
WHERE co.id_comanda IN(SELECT l.id_comanda
                        FROM LIVRARE l WHERE l.id_curier IN(SELECT c.id_curier FROM CURIER c WHERE c.id_angajat IN(SELECT a.id_angajat FROM ANGAJATI a WHERE a.data_angajat<LAST_DAY('01-MAR-2022')))

))
SELECT cu.id_comanda,cu.id_client,p.suma_totala FROM CURIERAT cu JOIN PLATA p ON p.id_comanda=cu.id_comanda;

--Sa se afiseze id-ul,numele si salariul angajatilor cu salariu sub medie si care sunt angajati dupa Martie 2022.

select id_angajat,nume_angajat,salariu_angajat
FROM ANGAJATI,(select avg(salariu_angajat) sal from ANGAJATI) aux
WHERE salariu_angajat<aux.sal AND data_angajat<SYSDATE AND data_angajat>'01-MAR-2022';

--
--
--Aceasta interogare sterge platile facute de clientii cu id-ul mai mare de 1010.

DELETE FROM PLATA
WHERE ID_COMANDA IN (SELECT ID_COMANDA FROM COMANDA WHERE ID_CLIENT IN(SELECT ID_CLIENT FROM CLIENT WHERE ID_CLIENT > 1010));

ROLLBACK;
--Aceasta interogare actualizeaza salariul chefilor care lucreaza la restaurantele de la Japanos Tineretului, inmultind salariul existent cu 1.1. 

UPDATE ANGAJATI 
SET SALARIU_ANGAJAT = SALARIU_ANGAJAT * 1.1 
WHERE ID_RESTAURANT IN (SELECT ID_RESTAURANT FROM RESTAURANT WHERE NUME_RESTAURANT = 'Japanos Tineretului')
AND ID_ANGAJAT IN(SELECT ID_ANGAJAT FROM CHEF ); 

--Actualizarea salariului tuturor angajatilor din Japanos Takeaway  la 2000: 

UPDATE ANGAJATI 
SET SALARIU_ANGAJAT = 2000 
WHERE ID_RESTAURANT = (SELECT ID_RESTAURANT FROM RESTAURANT WHERE NUME_RESTAURANT = 'Japanos Takeaway'); 

-- 
--

--
--

--Sa se afiseze id-ul platii,id-ul comenzii, suma totala si numele clientului pentru cele mai mari 10 note de plata.
select *
from (select p.id_plata,p.id_comanda,p.suma_totala,cl.nume_client
      from PLATA p 
      join COMANDA c on c.id_comanda=p.id_comanda
      join CLIENT cl on cl.id_client=c.id_client
      order by p.suma_totala desc) t
where rownum<=10;

--Sa se afiseze preparatele(nume+descriere+numele ingredientului principal)  prezente in comenzile cu valoarea notei de plata>130,descrescator in functie de suma totala.
SELECT p.nume_preparat,p.descriere_preparat,i.nume_ingredient,c.id_comanda,pl.suma_totala
FROM INGREDIENTE i
LEFT OUTER JOIN PREPARAT p ON  p.id_ingredient_principal=i.id_ingredient
LEFT OUTER JOIN MENIU m ON m.id_preparat=p.id_preparat
LEFT OUTER JOIN ITEM_COMANDA ic ON ic.id_item_meniu=m.id_item_meniu
LEFT OUTER JOIN COMANDA c ON c.id_comanda=ic.id_comanda
LEFT OUTER JOIN PLATA pl ON pl.id_comanda=c.id_comanda
WHERE pl.suma_totala>130
ORDER BY pl.suma_totala DESC;

--Sa se afiseze numele clienților care au plasat comenzi pentru toate rezervările existente.
SELECT c.NUME_CLIENT
FROM CLIENT c
WHERE NOT EXISTS (
    SELECT r.ID_REZERVARE
    FROM REZERVARI r
    WHERE NOT EXISTS (
        SELECT co.ID_COMANDA
        FROM COMANDA co
        WHERE co.ID_CLIENT= r.ID_CLIENT
        AND co.ID_CLIENT = c.ID_CLIENT
    )
);